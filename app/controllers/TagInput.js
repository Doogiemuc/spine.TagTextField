// Generated by CoffeeScript 1.6.3
/*
# A TagInput shows an editable list of tags. On double click a new input is shown
# where a new tag can be entered. On mouseover a red cross is shown,
# where this tag can be deleted.
#
# Usage:
# <code>new TagInput(tags: ['optional', 'list', 'of', 'tags'])</code>
*/


(function() {
  var NewTagInputCtrl, Spine, TagCtrl, TagInput, TagOracleCtrl, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require('spine');

  require('doogiesTools');

  TagInput = (function(_super) {
    var _editMode, _newTagInputCtrl;

    __extends(TagInput, _super);

    TagInput.prototype.tag = 'span';

    TagInput.prototype.className = 'taginput';

    TagInput.prototype.events = {
      'dblclick': 'startEdit'
    };

    _editMode = false;

    _newTagInputCtrl = null;

    function TagInput() {
      this.cancelEdit = __bind(this.cancelEdit, this);
      this.finishEdit = __bind(this.finishEdit, this);
      this.startEdit = __bind(this.startEdit, this);
      this.deleteTag = __bind(this.deleteTag, this);
      this.addOneTag = __bind(this.addOneTag, this);
      this.rerender = __bind(this.rerender, this);
      TagInput.__super__.constructor.apply(this, arguments);
      this.log("new TagInput(" + this.tags + ")");
      this.rerender();
    }

    TagInput.prototype.rerender = function() {
      var tag, _i, _len, _ref, _results;
      this.log("rerendering");
      this.el.empty();
      this.append('<i class="icon-tags" style="color:#999"></i>');
      _ref = this.tags;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        _results.push(this.addOneTag(tag));
      }
      return _results;
    };

    TagInput.prototype.addOneTag = function(newTag) {
      var tagCtrl;
      if (!newTag) {
        return;
      }
      this.log("addOneTag: ", newTag);
      tagCtrl = new TagCtrl({
        tagName: newTag
      });
      tagCtrl.bind('deleteTag', this.deleteTag);
      this.tags.push(newTag);
      return this.append(tagCtrl);
    };

    TagInput.prototype.deleteTag = function(tagName) {
      return this.tags.remove(tagName);
    };

    TagInput.prototype.startEdit = function() {
      if (_editMode) {
        return;
      }
      _editMode = true;
      this.el.addClass("tagtextfield_glow");
      _newTagInputCtrl = new NewTagInputCtrl();
      _newTagInputCtrl.bind('finishEdit', this.finishEdit);
      _newTagInputCtrl.bind('cancelEdit', this.cancelEdit);
      this.append(_newTagInputCtrl);
      return _newTagInputCtrl.el.focus();
    };

    TagInput.prototype.finishEdit = function(val) {
      if (val) {
        this.el.removeClass("tagtextfield_glow");
        _newTagInputCtrl.release();
        this.addOneTag(val);
      } else {
        this.cancelEdit();
      }
      return _editMode = false;
    };

    TagInput.prototype.cancelEdit = function() {
      _newTagInputCtrl.release();
      this.el.removeClass("tagtextfield_glow");
      return _editMode = false;
    };

    return TagInput;

  })(Spine.Controller);

  TagCtrl = (function(_super) {
    __extends(TagCtrl, _super);

    TagCtrl.prototype.tag = 'span';

    TagCtrl.prototype.className = 'tag';

    TagCtrl.prototype.events = {
      'mouseenter': 'toggleTagHighlight',
      'mouseleave': 'toggleTagHighlight',
      'click #deleteTag': 'deleteTag'
    };

    function TagCtrl() {
      this.deleteTag = __bind(this.deleteTag, this);
      this.toggleTagHighlight = __bind(this.toggleTagHighlight, this);
      TagCtrl.__super__.constructor.apply(this, arguments);
      if (!this.tagName) {
        this["throw"]("param 'tagName' required for TagCtrl constructor");
      }
      this.render();
    }

    TagCtrl.prototype.render = function() {
      return this.html(require("views/tag")({
        tagname: this.tagName
      }));
    };

    TagCtrl.prototype.toggleTagHighlight = function() {
      this.el.toggleClass('mouseover');
      return $(this.el).children('#deleteTag').toggleVisibility();
    };

    TagCtrl.prototype.deleteTag = function() {
      this.trigger('deleteTag', this.tagName);
      return this.release();
    };

    return TagCtrl;

  })(Spine.Controller);

  NewTagInputCtrl = (function(_super) {
    var ESCAPE_KEY, RETURN_KEY;

    __extends(NewTagInputCtrl, _super);

    function NewTagInputCtrl() {
      this.keyUp = __bind(this.keyUp, this);
      _ref = NewTagInputCtrl.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NewTagInputCtrl.prototype.tag = 'input';

    NewTagInputCtrl.prototype.className = 'newtag';

    NewTagInputCtrl.prototype.attributes = {
      'size': 5,
      'maxlength': 100
    };

    NewTagInputCtrl.prototype.events = {
      'keyup': 'keyUp',
      'blur': 'blur'
    };

    RETURN_KEY = 13;

    ESCAPE_KEY = 27;

    NewTagInputCtrl.prototype.keyUp = function(e) {
      if (e.which === RETURN_KEY) {
        this.trigger('finishEdit', this.el.val());
      }
      if (e.which === ESCAPE_KEY) {
        this.trigger('cancelEdit');
      }
      if (this.el.val().length > 2) {
        return this.el.append(new TagOracleCtrl({
          suggestions: ['suggest1', 'suggest2']
        }));
      }
    };

    NewTagInputCtrl.prototype.blur = function() {
      return this.trigger('finishEdit', this.el.val());
    };

    return NewTagInputCtrl;

  })(Spine.Controller);

  TagOracleCtrl = (function(_super) {
    var _selected;

    __extends(TagOracleCtrl, _super);

    TagOracleCtrl.prototype.tag = 'ul';

    TagOracleCtrl.prototype.className = 'tagoracle';

    _selected = 0;

    function TagOracleCtrl() {
      TagOracleCtrl.__super__.constructor.apply(this, arguments);
      if (!this.suggestions) {
        this.log("Must have suggestions in TagOracleCtrl");
      }
      this.el.append('<li>Test</li>');
      this.el.append('<li>Test2</li>');
    }

    TagOracleCtrl.prototype.setSuggestions = function() {
      var suggestion, _i, _len, _ref1;
      _ref1 = this.suggestions;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        suggestion = _ref1[_i];
        this.el.append('<li class="tagOracleItem">' + suggestion + '</li>');
      }
      return true;
    };

    return TagOracleCtrl;

  })(Spine.Controller);

  module.exports = TagInput;

  /*
  
  More ideas:
  
  When tag is selected
    move selection with <-  and -> keys
  
  When in _editMode
    input.val is empty   and user pressed backspace
    select previous Tag
  */


}).call(this);

/*
//@ sourceMappingURL=TagInput.map
*/
